schema {
  query: Query
  mutation: Mutation
}

input CreateEventInput {
  guests: [ParticipantInput!]!
  title: String!
}

type Event {
  _id: String!
  createdAt: Float!
  isActive: Boolean!
  ownerEmail: String!
  participants: [Participant!]!
  title: String!
  updatedAt: Float!
}

type Mutation {
  createEvent(createEventInput: CreateEventInput!): Event!
  freezeEvent(
    """Event id"""
    id: String!
  ): Event!
  respondToEvent(respondToEventInput: RespondToEventInput!): Participant!
  signIn(signInInput: SignInInput!): String!
  signUp(signUpInput: SignUpInput!): String!
}

type Participant {
  email: String!
  fullName: String!
  response: ResponseType!
  updatedAt: Float!
}

input ParticipantInput {
  email: String!
  fullName: String!
}

type Query {
  getAllRelatedEvents: [Event!]!
  getOneEvent(id: String!): Event!
  getUser: User!
}

input RespondToEventInput {
  eventId: String!
  response: ResponseType!
}

enum ResponseType {
  MAYBE
  NO
  YES
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  fullName: String!
  password: String!
}

type User {
  _id: String!
  email: String!
  events: [Event!]!
  fullName: String!
}